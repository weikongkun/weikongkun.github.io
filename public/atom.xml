<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>路漫漫</title>
  
  <subtitle>不积跬步无以至千里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weikongkun.github.io/"/>
  <updated>2018-11-09T00:52:50.231Z</updated>
  <id>https://weikongkun.github.io/</id>
  
  <author>
    <name>kkwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手写自己的Tomcat</title>
    <link href="https://weikongkun.github.io/2018/11/08/%E6%89%8B%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84Tomcat/"/>
    <id>https://weikongkun.github.io/2018/11/08/手写自己的Tomcat/</id>
    <published>2018-11-08T14:00:12.000Z</published>
    <updated>2018-11-09T00:52:50.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序结构："><a href="#程序结构：" class="headerlink" title="程序结构："></a>程序结构：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---config</span><br><span class="line">|   +---ServletMapping.java</span><br><span class="line">|   +---ServletMappingConfig.java</span><br><span class="line">+---server</span><br><span class="line">|   +---mytomcat</span><br><span class="line">|      +---MyTomcat.java（main）</span><br><span class="line">|   +---MyRequest.java</span><br><span class="line">|   +---MyReponse.java</span><br><span class="line">+---servlets</span><br><span class="line">|   +---DemoServlet_01.java</span><br><span class="line">|   +---DemoServlet_HelloWorld.java</span><br><span class="line">+---MyServlet.java</span><br></pre></td></tr></table></figure><h1 id="写自定义的http请求和响应封装类"><a href="#写自定义的http请求和响应封装类" class="headerlink" title="写自定义的http请求和响应封装类"></a>写自定义的http请求和响应封装类</h1><p>请求封装类MyRequest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pywkk.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="keyword">private</span> String method;</span><br><span class="line"><span class="comment">//根据输入流得到http请求信息并解析出url和请求方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String httpRequest = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">byte</span>[] httpRequestBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ((length = inputStream.read(httpRequestBytes)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">httpRequest = <span class="keyword">new</span> String(httpRequestBytes, <span class="number">0</span>, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String httpLine = httpRequest.split(<span class="string">"\n"</span>)[<span class="number">0</span>];<span class="comment">//得到请求消息行</span></span><br><span class="line">url = httpLine.split(<span class="string">"\\s"</span>)[<span class="number">1</span>];<span class="comment">//得到url</span></span><br><span class="line">method = httpLine.split(<span class="string">"\\s"</span>)[<span class="number">0</span>];<span class="comment">//得到方法类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> method;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求封装类MyReponse.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pywkk.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyResponse</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> OutputStream outputStream;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyResponse</span><span class="params">(OutputStream outputStream)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.outputStream = outputStream;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将响应正文加入响应报文中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">StringBuffer httpResponse = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">httpResponse.append(<span class="string">"HTTP/1.1 200 ok\n"</span>)</span><br><span class="line">.append(<span class="string">"Content-Type: text/html\n"</span>)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(<span class="string">"&lt;html&gt;&lt;body&gt;"</span>)</span><br><span class="line">.append(content)</span><br><span class="line">.append(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">outputStream.write(httpResponse.toString().getBytes());</span><br><span class="line">outputStream.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义Servlet模板类和继承类"><a href="#自定义Servlet模板类和继承类" class="headerlink" title="自定义Servlet模板类和继承类"></a>自定义Servlet模板类和继承类</h1><p>自定义servlet模板类MyServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pywkk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pywkk.server.MyRequest;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.server.MyResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(MyRequest myRequest, MyResponse myResponse)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(MyRequest myRequest, MyResponse myResponse)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(MyRequest myRequest, MyResponse myResponse)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"GET"</span>.equalsIgnoreCase(myRequest.getMethod()))</span><br><span class="line">doGet(myRequest, myResponse);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"POST"</span>.equalsIgnoreCase(myRequest.getMethod()))</span><br><span class="line">doPost(myRequest, myResponse);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyServlet测试的继承类</p><p>DemoServlet_01.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pywkk.servlets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pywkk.MyServlet;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.server.MyRequest;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.server.MyResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet_01</span> <span class="keyword">extends</span> <span class="title">MyServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(MyRequest myRequest, MyResponse myResponse)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">myResponse.write(<span class="string">"DemoServlet_01 get method......"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(MyRequest myRequest, MyResponse myResponse)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">myResponse.write(<span class="string">"DemoServlet_01 post method......"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DemoServlet_HelloWorld.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pywkk.servlets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pywkk.MyServlet;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.server.MyRequest;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.server.MyResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet_HelloWorld</span> <span class="keyword">extends</span> <span class="title">MyServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(MyRequest myRequest, MyResponse myResponse)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">myResponse.write(<span class="string">"DemoServlet_HelloWorld get method......"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(MyRequest myRequest, MyResponse myResponse)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">myResponse.write(<span class="string">"DemoServlet_HelloWorld post method......"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义映射类和配置类"><a href="#自定义映射类和配置类" class="headerlink" title="自定义映射类和配置类"></a>自定义映射类和配置类</h1><p>用映射类存储servlet的映射关系，代替Tomcat中的web.xml中某个servlet的映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pywkk.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletMapping</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String servletName;<span class="comment">//servlet命名</span></span><br><span class="line"><span class="keyword">private</span> String url;<span class="comment">//映射的url</span></span><br><span class="line"><span class="keyword">private</span> String clazz;<span class="comment">//对应的类名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServletMapping</span><span class="params">(String servletName, String url, String clazz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.servletName = servletName;</span><br><span class="line"><span class="keyword">this</span>.url = url;</span><br><span class="line"><span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> servletName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletName</span><span class="params">(String servletName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.servletName = servletName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.url = url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClazz</span><span class="params">(String clazz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用配置类存储定义的所有MyServlet映射信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pywkk.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletMappingConfig</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ServletMapping&gt; servletMappingList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//预加载映射信息</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">servletMappingList.add(<span class="keyword">new</span> ServletMapping(<span class="string">"DemoServlet_01"</span>, <span class="string">"/demo01"</span>, <span class="string">"com.pywkk.servlets.DemoServlet_01"</span>));</span><br><span class="line">servletMappingList.add(<span class="keyword">new</span> ServletMapping(<span class="string">"DemoServlet_HelloWorld"</span>, <span class="string">"/HelloWorld"</span>, <span class="string">"com.pywkk.servlets.DemoServlet_HelloWorld"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务器类"><a href="#服务器类" class="headerlink" title="服务器类"></a>服务器类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pywkk.server.mytomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.MyServlet;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.config.ServletMapping;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.config.ServletMappingConfig;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.server.MyRequest;</span><br><span class="line"><span class="keyword">import</span> com.pywkk.server.MyResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTomcat</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">8080</span>;<span class="comment">//默认端口8080</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; urlServlet = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyTomcat</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyTomcat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">initServletMapping();<span class="comment">//初始化容器，解析servlet映射信息</span></span><br><span class="line">ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">System.out.println(<span class="string">"MyTomcat is start......"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket socket = serverSocket.accept();</span><br><span class="line">InputStream inputStream = socket.getInputStream();</span><br><span class="line">OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">MyRequest myRequest = <span class="keyword">new</span> MyRequest(inputStream);</span><br><span class="line">MyResponse myResponse = <span class="keyword">new</span> MyResponse(outputStream);</span><br><span class="line">dispatch(myRequest, myResponse);</span><br><span class="line">socket.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">serverSocket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用反射，创建对应的MyServlet类，并调用service方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(MyRequest myRequest, MyResponse myResponse)</span> </span>&#123;</span><br><span class="line">String clazz = urlServlet.get(myRequest.getUrl());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;MyServlet&gt; myServletClass = (Class&lt;MyServlet&gt;) Class.forName(clazz);</span><br><span class="line">MyServlet myServlet = myServletClass.newInstance();</span><br><span class="line"> myServlet.service(myRequest, myResponse);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException | InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化并装载MyServlet映射信息</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initServletMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ServletMapping servletMapping : ServletMappingConfig.servletMappingList)</span><br><span class="line">urlServlet.put(servletMapping.getUrl(), servletMapping.getClazz());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> MyTomcat(<span class="number">8080</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="待改进……"><a href="#待改进……" class="headerlink" title="待改进……"></a>待改进……</h3><h1 id="参考目录："><a href="#参考目录：" class="headerlink" title="参考目录："></a>参考目录：</h1><p>1、<a href="https://mp.weixin.qq.com/s?__biz=MzIzMzgxOTQ5NA==&amp;mid=2247485667&amp;idx=1&amp;sn=98a48800561d8e06c71ba3c20cf52b1c&amp;chksm=e8fe94eadf891dfc1ca53e3487f8425002e43251777f71d43efed3bb7a7f45154897abb6ecf6&amp;mpshare=1&amp;scene=23&amp;srcid=1108RGTEgqXo8eZ9csKs4qxW#rd" target="_blank" rel="noopener">写一款 Tomcat 也没有那么难</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;程序结构：&quot;&gt;&lt;a href=&quot;#程序结构：&quot; class=&quot;headerlink&quot; title=&quot;程序结构：&quot;&gt;&lt;/a&gt;程序结构：&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="Tomcat" scheme="https://weikongkun.github.io/categories/Tomcat/"/>
    
    
      <category term="Tomcat" scheme="https://weikongkun.github.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Git基础</title>
    <link href="https://weikongkun.github.io/2018/11/06/Git%E5%9F%BA%E7%A1%80/"/>
    <id>https://weikongkun.github.io/2018/11/06/Git基础/</id>
    <published>2018-11-06T13:54:16.048Z</published>
    <updated>2018-11-06T13:54:16.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h1><h2 id="1、获取Git仓库"><a href="#1、获取Git仓库" class="headerlink" title="1、获取Git仓库"></a>1、获取Git仓库</h2><h4 id="（1）在现有目录下初始化仓库"><a href="#（1）在现有目录下初始化仓库" class="headerlink" title="（1）在现有目录下初始化仓库"></a>（1）在现有目录下初始化仓库</h4><pre><code>git init</code></pre><p>该命令将创建一个名为.git的目录，这个字目录含有初始化的Git仓库中所有的必须文件，这些文件是Git仓库的骨干。但是这个时候只是做了一个初始化的操作。</p><h4 id="（2）克隆现有的仓库"><a href="#（2）克隆现有的仓库" class="headerlink" title="（2）克隆现有的仓库"></a>（2）克隆现有的仓库</h4><p>如果想参与某个项目的开发，贡献自己的一份力，这是需要用<code>git clone</code>命令，clone是负值Git仓库服务器上的几乎所有数据，不仅仅是复制文件，执行<code>git clone</code>命令的时候，默认复制远程仓库每一个文件的每一个版本（分支）都将被拉取下来。</p><pre><code>git clone [url]</code></pre><p>Git支持多种传输协议：<code>http://</code>协议，<code>git://</code>协议，<code>SSH</code>传输协议</p><h2 id="2、记录每次更新到仓库"><a href="#2、记录每次更新到仓库" class="headerlink" title="2、记录每次更新到仓库"></a>2、记录每次更新到仓库</h2><blockquote><p>现在我们手上有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。 接下来，对这些文件做些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。</p></blockquote><blockquote><p>请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。</p></blockquote><blockquote><p>编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 我们逐步将这些修改过的文件放入暂存区，然后提交所有暂存了的修改，如此反复。所以使用Git时文件的生命周期如下：  </p><p><img src="/img/Git/git生命周期.png" alt="git生命周期.png"></p></blockquote><h4 id="（1）检查文件状态"><a href="#（1）检查文件状态" class="headerlink" title="（1）检查文件状态"></a>（1）检查文件状态</h4><p>检查文件处于什么状态，用<code>git status</code>命令。<br>当克隆玩仓库后使用此命令，会提示工作目录非常干净，意思是已跟踪文件最近没有被修改过，并且目录下没有出现处于任何跟踪状态的新文件，否则Git会列出来。</p><h4 id="（2）跟踪新文件"><a href="#（2）跟踪新文件" class="headerlink" title="（2）跟踪新文件"></a>（2）跟踪新文件</h4><pre><code>git add 文件名</code></pre><h4 id="（3）暂存已修改文件"><a href="#（3）暂存已修改文件" class="headerlink" title="（3）暂存已修改文件"></a>（3）暂存已修改文件</h4><pre><code>git add</code></pre><p>这是一个多功能命令：</p><ul><li>开始跟踪新文件</li><li>把已跟踪的文件放在暂存区</li><li>用于合并时把有冲突的文件标记为已解决状态等</li></ul><p>将这个命令理解为“添加内容到下一次提交出”而不是“将一个文件添加到项目中”要更加合适。</p><h4 id="（4）忽略文件"><a href="#（4）忽略文件" class="headerlink" title="（4）忽略文件"></a>（4）忽略文件</h4><p>一般有些文件不需要纳入Git的管理，不希望他们总出现在未跟踪文件列表，比如日志文件啊。这时可以创建一个名为<code>.gitignore</code>的文件，列出要忽略的文件模式。</p><pre><code>$cat.gitignore*.[oa]*~</code></pre><blockquote><p>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。</p></blockquote><h4 id="（4）查看暂存和未暂存的修改"><a href="#（4）查看暂存和未暂存的修改" class="headerlink" title="（4）查看暂存和未暂存的修改"></a>（4）查看暂存和未暂存的修改</h4><pre><code>git diff //修改之后还没有暂存起来的变化内容。git diff --cached //工作目录中当前文件和暂存区域快照之间的差异</code></pre><h4 id="（5）提交更新"><a href="#（5）提交更新" class="headerlink" title="（5）提交更新"></a>（5）提交更新</h4><pre><code>git commit</code></pre><h4 id="（6）跳过暂存区域"><a href="#（6）跳过暂存区域" class="headerlink" title="（6）跳过暂存区域"></a>（6）跳过暂存区域</h4><p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 <code>git commit</code> 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code>步骤。</p><h4 id="（7）移除文件"><a href="#（7）移除文件" class="headerlink" title="（7）移除文件"></a>（7）移除文件</h4><p>如果删除在“未暂存清单”的文件：</p><pre><code>git statusgit rm 文件名</code></pre><p>另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 <code>--cached</code> 选项：</p><pre><code>$ git rm --cached README</code></pre><h2 id="3、查看提交历史"><a href="#3、查看提交历史" class="headerlink" title="3、查看提交历史"></a>3、查看提交历史</h2><pre><code>git log</code></pre><p>默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p><p><code>git log</code> 有许多选项可以帮助你搜寻你所要找的提交</p><ul><li>-p   用来显示每次提交的内容差异，也可以再加上-2来仅显示最近两次提交。</li><li>–stat 如果想看到每次提交的简略的统计信息。</li></ul><h2 id="4、撤销操作"><a href="#4、撤销操作" class="headerlink" title="4、撤销操作"></a>4、撤销操作</h2><h4 id="（1）撤消操作"><a href="#（1）撤消操作" class="headerlink" title="（1）撤消操作"></a>（1）撤消操作</h4><pre><code>git commit -amend //这个命令会将暂存区的文件提交。如果自  上次提交以来你未做任何修改，那么快照会保持不变，而你所修改 的知识提交信息</code></pre><h4 id="（2）取消暂存的文件"><a href="#（2）取消暂存的文件" class="headerlink" title="（2）取消暂存的文件"></a>（2）取消暂存的文件</h4><pre><code>git reset HEAD 文件名</code></pre><h4 id="（3）撤销对文件的修改"><a href="#（3）撤销对文件的修改" class="headerlink" title="（3）撤销对文件的修改"></a>（3）撤销对文件的修改</h4><pre><code>git checkout -- 文件名</code></pre><h2 id="5、远程仓库的使用"><a href="#5、远程仓库的使用" class="headerlink" title="5、远程仓库的使用"></a>5、远程仓库的使用</h2><h4 id="（1）查看远程仓库"><a href="#（1）查看远程仓库" class="headerlink" title="（1）查看远程仓库"></a>（1）查看远程仓库</h4><p>如果想查看已经配置的远程仓库服务器，可以运行<code>git remote</code>命令，他会列出你指定的每一个远程服务器的简写。<br>也可以指定选项<code>-v</code>，会显示需要读写远程仓库使用的Git保存的简写与其对应的URL。</p><h4 id="（2）添加远程仓库"><a href="#（2）添加远程仓库" class="headerlink" title="（2）添加远程仓库"></a>（2）添加远程仓库</h4><pre><code>$ git remoteorigin$ git remote add pb https://github.com/paulboone/ticgit//添加远程仓库$ git remote -vorigin    https://github.com/schacon/ticgit (fetch)origin    https://github.com/schacon/ticgit (push)pb    https://github.com/paulboone/ticgit (fetch)pb    https://github.com/paulboone/ticgit (push)</code></pre><p>现在可以在命令行使用字符串pb来代替整个URL。<br>例如，想要拉取Paul的仓库中有但你没有的信息，可以运行<code>git fetch pb</code></p><h4 id="3-从远程仓库中抓取和拉取"><a href="#3-从远程仓库中抓取和拉取" class="headerlink" title="(3)从远程仓库中抓取和拉取"></a>(3)从远程仓库中抓取和拉取</h4><p>从远程仓库中获得数据，可以执行<br>    git fetch [remote-name]<br>这个命令会访问远程仓库，从中拉取所有你还没有的数据。执行完成后，你将会拥有那个远程仓库中所有的分支引用，可以随时合并查看。</p><p>如果使用<code>clone</code>命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以”origin”为简写。<br>注意”fetch”命令会将数据拉取到你的本地仓库，但并不会自动合并或修改你当前的工作。当准备好时你必须手动将其合并入你的工作。  </p><p>如果你有一个分支设置为跟踪一个远程分支，可以使用<code>git pull</code>命令来自动抓取然后合并远程分支到当前分支。</p><h4 id="（4）推送到远程仓库"><a href="#（4）推送到远程仓库" class="headerlink" title="（4）推送到远程仓库"></a>（4）推送到远程仓库</h4><p>当你想分享你的项目时，必须将其推送到上游：</p><pre><code>git push [remote-name] [branch-name]</code></pre><p>当你想将master分支推送到origin服务器时，运行如下命令可以将你所做的备份到服务器</p><pre><code>git push origin master</code></pre><h4 id="（5）查看远程仓库"><a href="#（5）查看远程仓库" class="headerlink" title="（5）查看远程仓库"></a>（5）查看远程仓库</h4><p>如果想要查看某一个远程仓库的信息，可以使用<br>    <code>git remote show [remote-name]</code>  </p><h4 id="（6）远程仓库的移除和重命名"><a href="#（6）远程仓库的移除和重命名" class="headerlink" title="（6）远程仓库的移除和重命名"></a>（6）远程仓库的移除和重命名</h4><p>如果想要重命名引用的名字可以运行<code>git remote  rename</code>去修改一个远程仓库的简写名 。</p><p>如果因为一些原因想要移除一个远程仓库：<br>    git remote rm 仓库名  </p><h2 id="6、打标签"><a href="#6、打标签" class="headerlink" title="6、打标签"></a>6、打标签</h2><h4 id="（1）列出标签"><a href="#（1）列出标签" class="headerlink" title="（1）列出标签"></a>（1）列出标签</h4><pre><code>git tag </code></pre><h4 id="（2）创建标签"><a href="#（2）创建标签" class="headerlink" title="（2）创建标签"></a>（2）创建标签</h4><ul><li>附注标签：<code>git tag -a v1.4 -m &#39;my version 1.4&#39;</code></li><li>轻量标签：<code>git tag v1.4-lw //不需要使用-a -s 或 -m选项，只需要提供标签名字</code></li></ul><h4 id="（3）后期打标签"><a href="#（3）后期打标签" class="headerlink" title="（3）后期打标签"></a>（3）后期打标签</h4><pre><code>git tag -a v1.2 部分校验和</code></pre><h4 id="（4）共享标签"><a href="#（4）共享标签" class="headerlink" title="（4）共享标签"></a>（4）共享标签</h4><p>默认情况下，<code>git push</code>命令并不会传送标签到远程仓库服务器上，在创建完标签后你必须显示的推送标签到共享服务器上，这个时候就像共享远程分支一样，可以运行：  </p><pre><code>git push origin [tagname]  </code></pre><h2 id="7、Git别名"><a href="#7、Git别名" class="headerlink" title="7、Git别名"></a>7、Git别名</h2><p>为每一个命令设置别名，比如：</p><pre><code>git config -global alias.co checkout</code></pre><p>commit用ci来代替  </p><p><strong>参考</strong>：<a href="http://git-scm.com" target="_blank" rel="noopener">http://git-scm.com</a></p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git基础&quot;&gt;&lt;a href=&quot;#Git基础&quot; class=&quot;headerlink&quot; title=&quot;Git基础&quot;&gt;&lt;/a&gt;Git基础&lt;/h1&gt;&lt;h2 id=&quot;1、获取Git仓库&quot;&gt;&lt;a href=&quot;#1、获取Git仓库&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Git" scheme="https://weikongkun.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://weikongkun.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git分支</title>
    <link href="https://weikongkun.github.io/2018/11/06/Git%E5%88%86%E6%94%AF/"/>
    <id>https://weikongkun.github.io/2018/11/06/Git分支/</id>
    <published>2018-11-06T13:54:16.046Z</published>
    <updated>2018-11-06T13:54:16.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><h2 id="1、分支简介"><a href="#1、分支简介" class="headerlink" title="1、分支简介"></a>1、分支简介</h2><blockquote><p>在进行提交操作时，Git 会保存一个提交对象（commit object）。知道了 Git 保存数据的方式，我们可以很自然的想到——该提交对象会包含一个指向暂存内容快照的指针。 但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象，</p><p>为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用我们在 起步 中提到的 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交：</p></blockquote><pre><code>git add git commit -m &quot;dfas&quot;</code></pre><p>Git的默认分支名字为master分支，他和其他分支完全没有区别，之所以每一个仓库都有一个master分支，是因为<code>git init</code>命令默认创建它。</p><h4 id="（1）分支创建"><a href="#（1）分支创建" class="headerlink" title="（1）分支创建"></a>（1）分支创建</h4><pre><code>git branch testing</code></pre><p>这会在当前所在的提交对象上创建一个指针。<br>Git当前有个HEAD的特殊指针,指向当前所在的本地分支，<code>git branch</code>命令仅仅创建了一个分支，并不会自动切换到新分支去。</p><p>可以用<code>git log</code>命令查看各个分支当前所指的对象，提供这一参数的是<code>--decorate</code></p><h4 id="（2）分支切换"><a href="#（2）分支切换" class="headerlink" title="（2）分支切换"></a>（2）分支切换</h4><pre><code>git checkout testing</code></pre><p>这样HEAD就指向testing分支了</p><p><strong>分支切换会改变你工作目录中的文件<br>在切换分支时，一定要注意你工作目录里的文件会被改变。 如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。 如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。</strong></p><h4 id="（3）项目分叉历史"><a href="#（3）项目分叉历史" class="headerlink" title="（3）项目分叉历史"></a>（3）项目分叉历史</h4><pre><code>git log --oneline --decorate --graph --all</code></pre><h4 id="（4）分支的新建和合并"><a href="#（4）分支的新建和合并" class="headerlink" title="（4）分支的新建和合并"></a>（4）分支的新建和合并</h4><p>想要新建一个分支并同时切换到那个分支上，可以运行一个带有<code>-b</code>参数的<code>git checkout</code>命令：</p><pre><code>git checkout -b iss53switch to a new branch &quot;iss53&quot;</code></pre><p>上述两条命令的简写</p><pre><code>git branch iss53git checkout iss53</code></pre><h4 id="（5）创建一个新分支指针"><a href="#（5）创建一个新分支指针" class="headerlink" title="（5）创建一个新分支指针"></a>（5）创建一个新分支指针</h4><p>提交iss53下的所有修改，切换带master分支。</p><pre><code>git checkout masterswitch to branch &apos;master&apos;</code></pre><p>将修改部署到直接上游的master分支，当master分支是要合并对象的上游，只需将指针右移，移动到合并对象处：</p><pre><code>git checkout mastergit merge hotfix</code></pre><h4 id="（6）删除分支"><a href="#（6）删除分支" class="headerlink" title="（6）删除分支"></a>（6）删除分支</h4><pre><code>git branch -d hotfix</code></pre><p>切回到正在的工作继续工作：</p><pre><code>git check iss53switch to branch &quot;iss53&quot;</code></pre><h4 id="（7）分支的合并"><a href="#（7）分支的合并" class="headerlink" title="（7）分支的合并"></a>（7）分支的合并</h4><pre><code>git check masterSwitch to branch &apos;master&apos;git merge iss53</code></pre><p>master不是iss53的直接祖先，这样不得不做一些额外的工作，Git会使用两个分支的末端所指的快照以及这两个分支的工作祖先，做一个简单的三方合并。</p><p>既然你的修改已经合并进来了，你已经不再需要 iss53 分支了。 现在你可以在任务追踪系统中关闭此项任务，并删除这个分支。</p><h4 id="（8）遇到冲突时的分支合并"><a href="#（8）遇到冲突时的分支合并" class="headerlink" title="（8）遇到冲突时的分支合并"></a>（8）遇到冲突时的分支合并</h4><h4 id="（9）分支管理"><a href="#（9）分支管理" class="headerlink" title="（9）分支管理"></a>（9）分支管理</h4><p><code>git branch</code>不仅可以创建与删除分支，如果不加任何参数运行他，会得到当前所有分支的一个列表。带有<code>*</code>号的是当前所在的分支。如果要查看每一分支的最后一次提交，使用<code>git branch -v</code>命令。<br><code>--merged</code>与<code>--no-merged</code>这两个选项以过滤这个列表中的已经合并和尚未合并到当前分支的分支。</p><p>用<code>git branch -d</code>删除还未合并的工作会失败，可以用<code>-D</code>强制删除。</p><h2 id="2、分支工作流"><a href="#2、分支工作流" class="headerlink" title="2、分支工作流"></a>2、分支工作流</h2><h4 id="（1）长期分支"><a href="#（1）长期分支" class="headerlink" title="（1）长期分支"></a>（1）长期分支</h4><blockquote><p>因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些特性分支合并入其他分支中。</p><p>许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。 他们还有一些名为 develop 或者 next 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 master 分支了。 这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多 bug 之后，就可以合并入主干分支中，等待下一次的发布。</p></blockquote><h4 id="（2）特性分支"><a href="#（2）特性分支" class="headerlink" title="（2）特性分支"></a>（2）特性分支</h4><blockquote><p>你已经在上一节中你创建的 iss53 和 hotfix 特性分支中看到过这种用法。 你在上一节用到的特性分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在特性分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度</p></blockquote><h2 id="3、远程分支"><a href="#3、远程分支" class="headerlink" title="3、远程分支"></a>3、远程分支</h2><blockquote><p>远程引用是对远程仓库的引用（指针），包括分支、标签等等。 你可以通过 git ls-remote (remote) 来显式地获得远程引用的完整列表，或者通过 git remote show (remote) 获得远程分支的更多信息。 然而，一个更常见的做法是利用远程跟踪分支。</p></blockquote><blockquote><p>远程跟踪分支是远程分支状态的引用。 它们是你不能移动的本地引用，当你做任何网络通信操作时，它们会自动移动。 远程跟踪分支像是你上次连接到远程仓库时，那些分支所处状态的书签。</p></blockquote><blockquote><p>它们以 <code>(remote)/(branch)</code> 形式命名。 例如，如果你想要看你最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 <code>origin/master</code> 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支；但是在服务器上的分支会指向 origin/iss53 的提交。</p></blockquote><blockquote><p>这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在 git.ourcompany.com 的 Git 服务器。 如果你从这里克隆，Git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据，创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 Git 也会给你一个与 origin 的 master 分支在指向同一个地方的本地 master 分支，这样你就有工作的基础。</p></blockquote><blockquote><p>如果你在本地的 master 分支做了一些工作，然而在同一时间，其他人推送提交到 git.ourcompany.com 并更新了它的 master 分支，那么你的提交历史将向不同的方向前进。 也许，只要你不与 origin 服务器连接，你的 origin/master 指针就不会移动。<br>如果要同步你的工作，运行 <code>git fetch origin</code> 命令。 这个命令查找 “origin” 是哪一个服务器，从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针指向新的、更新后的位置。</p></blockquote><blockquote><p>当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步 - 你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。<br>如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 <code>git push (remote) (branch）</code>。</p></blockquote><blockquote><p><strong>你也可以运行 git push origin serverfix:serverfix，它会做同样的事 - 相当于它说，“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。 如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。</strong><br>下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用。<br>要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支 - 只有一个不可以修改的 origin/serverfix 指针。<br>可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上。</p></blockquote><p><strong>参考：</strong><a href="http://git-scm.com" target="_blank" rel="noopener">http://git-scm.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git分支&quot;&gt;&lt;a href=&quot;#Git分支&quot; class=&quot;headerlink&quot; title=&quot;Git分支&quot;&gt;&lt;/a&gt;Git分支&lt;/h1&gt;&lt;h2 id=&quot;1、分支简介&quot;&gt;&lt;a href=&quot;#1、分支简介&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
      <category term="Git" scheme="https://weikongkun.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://weikongkun.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>《现代操作系统》总结</title>
    <link href="https://weikongkun.github.io/2018/11/06/%E3%80%8A%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8B%E6%80%BB%E7%BB%93/"/>
    <id>https://weikongkun.github.io/2018/11/06/《现代操作系统》总结/</id>
    <published>2018-11-06T13:29:37.000Z</published>
    <updated>2018-11-06T13:54:16.148Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="操作系统" scheme="https://weikongkun.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://weikongkun.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java堆外内存</title>
    <link href="https://weikongkun.github.io/2018/09/28/Java%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98/"/>
    <id>https://weikongkun.github.io/2018/09/28/Java堆外内存/</id>
    <published>2018-09-28T11:43:57.000Z</published>
    <updated>2018-11-06T13:54:16.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用堆外内存"><a href="#为什么使用堆外内存" class="headerlink" title="为什么使用堆外内存"></a>为什么使用堆外内存</h1><ul><li><p>来源于TaobaoJVM对OpenJDK定制开发的GCIH部分，其中GCIH就是将CMS Old Heap区的一部分划分出来，这部分内存虽然还在堆中，但是已经不被GC所管理，将长生命周期Java对象放在Java堆外，GC不能管理GCIH内Java对象。</p></li><li><p>将长期存活的对象移入堆外内存，从而减少CMS管理的对象数量，降低Full GC的次数和频率，达到提高系统响应速度的目的。</p></li><li>加快复制的速度：堆内在缓存到远程时，会先复制到直接内存，然后再发送，而堆外内存相当于省略了这个工作。</li><li>这部分内容可以进程间共享，这样一台Server就都可以跑更多的VM实例。</li></ul><h1 id="堆外内存的使用"><a href="#堆外内存的使用" class="headerlink" title="堆外内存的使用"></a>堆外内存的使用</h1><p>JDK1.4新加入NIO，引入了一种基于Channel与Buffer的I/O方式，可以使用Native函数库直接分配堆外内存。</p><p>由JDK提供的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么使用堆外内存&quot;&gt;&lt;a href=&quot;#为什么使用堆外内存&quot; class=&quot;headerlink&quot; title=&quot;为什么使用堆外内存&quot;&gt;&lt;/a&gt;为什么使用堆外内存&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;来源于TaobaoJVM对OpenJDK定制开发的GCIH部分，其
      
    
    </summary>
    
      <category term="JVM" scheme="https://weikongkun.github.io/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://weikongkun.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Netty入门</title>
    <link href="https://weikongkun.github.io/2018/09/28/Netty%E5%85%A5%E9%97%A8/"/>
    <id>https://weikongkun.github.io/2018/09/28/Netty入门/</id>
    <published>2018-09-28T09:17:34.000Z</published>
    <updated>2018-11-06T13:54:16.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Netty"><a href="#什么是Netty" class="headerlink" title="什么是Netty"></a>什么是Netty</h1><blockquote><p>Netty是一个利用Java的高级网络编程能力，隐藏器背后的复杂性而提供一个易于使用的框架。</p><p>Netty是一个广泛使用的Java网络编程框架。</p><p>将JavaNIO进行了包装。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Netty&quot;&gt;&lt;a href=&quot;#什么是Netty&quot; class=&quot;headerlink&quot; title=&quot;什么是Netty&quot;&gt;&lt;/a&gt;什么是Netty&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Netty是一个利用Java的高级网络编程能力，隐藏器背后的复杂性
      
    
    </summary>
    
      <category term="Netty" scheme="https://weikongkun.github.io/categories/Netty/"/>
    
    
      <category term="Netty" scheme="https://weikongkun.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>面经</title>
    <link href="https://weikongkun.github.io/2018/08/03/%E9%9D%A2%E7%BB%8F/"/>
    <id>https://weikongkun.github.io/2018/08/03/面经/</id>
    <published>2018-08-03T15:44:07.000Z</published>
    <updated>2018-11-06T13:54:16.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蚂蚁金服提前批中间件"><a href="#蚂蚁金服提前批中间件" class="headerlink" title="蚂蚁金服提前批中间件"></a>蚂蚁金服提前批中间件</h1><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>线程池：线程池中线程name的设置。线程池线程执行栈的观测方法。线程池中线程怎么得知线程的状态。</p><p>分布式框架</p><p>TCP/IP：TCP为什么是可靠的</p><p>Linux：线程进程的操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;蚂蚁金服提前批中间件&quot;&gt;&lt;a href=&quot;#蚂蚁金服提前批中间件&quot; class=&quot;headerlink&quot; title=&quot;蚂蚁金服提前批中间件&quot;&gt;&lt;/a&gt;蚂蚁金服提前批中间件&lt;/h1&gt;&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="面试" scheme="https://weikongkun.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://weikongkun.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SOA</title>
    <link href="https://weikongkun.github.io/2018/07/27/SOA/"/>
    <id>https://weikongkun.github.io/2018/07/27/SOA/</id>
    <published>2018-07-27T01:01:10.000Z</published>
    <updated>2018-11-06T13:54:16.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于TCP的RPC"><a href="#基于TCP的RPC" class="headerlink" title="基于TCP的RPC"></a>基于TCP的RPC</h1><h2 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h2><h2 id="基于TCP协议实现RPC"><a href="#基于TCP协议实现RPC" class="headerlink" title="基于TCP协议实现RPC"></a>基于TCP协议实现RPC</h2><h1 id="基于HTTP协议的RPC"><a href="#基于HTTP协议的RPC" class="headerlink" title="基于HTTP协议的RPC"></a>基于HTTP协议的RPC</h1><h2 id="HTTP协议栈"><a href="#HTTP协议栈" class="headerlink" title="HTTP协议栈"></a>HTTP协议栈</h2><h2 id="HTTP请求与响应"><a href="#HTTP请求与响应" class="headerlink" title="HTTP请求与响应"></a>HTTP请求与响应</h2><h2 id="通过HttpClient发送HTTP请求"><a href="#通过HttpClient发送HTTP请求" class="headerlink" title="通过HttpClient发送HTTP请求"></a>通过HttpClient发送HTTP请求</h2><h2 id="JSON和XML"><a href="#JSON和XML" class="headerlink" title="JSON和XML"></a>JSON和XML</h2><h2 id="RESTful和RPC"><a href="#RESTful和RPC" class="headerlink" title="RESTful和RPC"></a>RESTful和RPC</h2><h2 id="基于HTTP协议的RPC的实现"><a href="#基于HTTP协议的RPC的实现" class="headerlink" title="基于HTTP协议的RPC的实现"></a>基于HTTP协议的RPC的实现</h2><h1 id="服务的路由和负载均衡"><a href="#服务的路由和负载均衡" class="headerlink" title="服务的路由和负载均衡"></a>服务的路由和负载均衡</h1><h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><ol><li>轮询(Round Robin)算法</li><li>随机法</li><li>原地址哈希法</li><li>加权轮询法</li><li>加权随机法</li><li>最小链接法</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基于TCP的RPC&quot;&gt;&lt;a href=&quot;#基于TCP的RPC&quot; class=&quot;headerlink&quot; title=&quot;基于TCP的RPC&quot;&gt;&lt;/a&gt;基于TCP的RPC&lt;/h1&gt;&lt;h2 id=&quot;对象的序列化&quot;&gt;&lt;a href=&quot;#对象的序列化&quot; class=&quot;head
      
    
    </summary>
    
      <category term="分布式" scheme="https://weikongkun.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="https://weikongkun.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>锁池与等待池</title>
    <link href="https://weikongkun.github.io/2018/07/25/%E9%94%81%E6%B1%A0%E4%B8%8E%E7%AD%89%E5%BE%85%E6%B1%A0/"/>
    <id>https://weikongkun.github.io/2018/07/25/锁池与等待池/</id>
    <published>2018-07-24T16:14:35.000Z</published>
    <updated>2018-11-06T13:54:16.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中对锁池与等待池的理解？"><a href="#Java中对锁池与等待池的理解？" class="headerlink" title="Java中对锁池与等待池的理解？"></a>Java中对锁池与等待池的理解？</h1><p>对于 Java 虚拟机中运行程序的每个对象来说都有两个池，锁(monitor)池和等待(wait)池，而这两个池又与 Object 基类的 wait、notify、notifyAll 三个方法和 synchronized 相关（也可是 Lock 及 await 等）。</p><p><strong>锁池</strong>的本质就是假设线程 A 已经拥有了某个对象（不是类）的锁，而其它线程 B、C 想要调用这个对象的某个 synchronized 方法（或者块），由于这些 B、C 线程在进入对象的 synchronized 方法（或者块）之前必须先获得该对象锁的拥有权，而恰巧该对象的锁目前正被线程 A 所拥有，所以这些 B、C 线程就进入了该对象的锁池，这就是锁池。</p><p><strong>等待池</strong>的本质就是假设线程 A 调用了某个对象的 wait() 方法，线程 A 就会释放该对象的锁（因为 wait() 方法必须在 synchronized中使用，所以执行 wait() 方法前线程 A 已经持有了该对象的锁)，同时线程 A 就进入到了该对象的等待池中。如果此时线程 B 调用了相同对象的 notifyAll() 方法，则处于该对象等待池中的线程就会全部进入该对象的锁池中去准备争夺锁的拥有权。而如果此时线程 B 调用的是相同对象的 notify() 方法，则仅仅会有一个处于该对象等待池中的线程（随机）进入该对象的锁池中去准备争夺锁的拥有权。</p><p><strong>所以说锁池和等待池都是针对对象而言的</strong></p><h1 id="notify与notifyAll到底有什么区别？"><a href="#notify与notifyAll到底有什么区别？" class="headerlink" title="notify与notifyAll到底有什么区别？"></a>notify与notifyAll到底有什么区别？</h1><p>简单说就是当一个线程调用了某个对象的 wait() 方法后就必须等其他线程调用这个对象的 notify/notifyall 方法；使用 notifyall 方法可以唤醒所有处于等待状态的线程，然后使其重新进入锁的争夺队列中，而使用 notify 方法只能唤醒处于等待状态的线程之一；此外如果使用 notify 不当很容易会导致并发死锁出现。</p><p>而从深层次来说就如上题答案所示，notifyAll 会让对象所有处于等待池的线程全部进入锁池去准备竞争获取一个锁的机会，没有获取到锁而已经呆在锁池的线程只能继续等待其他机会获取锁，而不能再主动回到等待池。对于 notify 来说只会让对象所有等待池中一个随机的线程进入锁池去竞争获取一个锁的机会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java中对锁池与等待池的理解？&quot;&gt;&lt;a href=&quot;#Java中对锁池与等待池的理解？&quot; class=&quot;headerlink&quot; title=&quot;Java中对锁池与等待池的理解？&quot;&gt;&lt;/a&gt;Java中对锁池与等待池的理解？&lt;/h1&gt;&lt;p&gt;对于 Java 虚拟机中运行
      
    
    </summary>
    
      <category term="面试" scheme="https://weikongkun.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://weikongkun.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>分布式入门</title>
    <link href="https://weikongkun.github.io/2018/07/24/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <id>https://weikongkun.github.io/2018/07/24/分布式入门/</id>
    <published>2018-07-24T13:37:00.000Z</published>
    <updated>2018-11-06T13:54:16.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、CAP"><a href="#一、CAP" class="headerlink" title="一、CAP"></a>一、CAP</h1><p>分布式系统不可能同时满足一致性(C)、可用性(A)、分区容忍性(P)</p><h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><h2 id="分区容忍性"><a href="#分区容忍性" class="headerlink" title="分区容忍性"></a>分区容忍性</h2><h2 id="权衡"><a href="#权衡" class="headerlink" title="权衡"></a>权衡</h2><p>在分布式系统中，分区容忍性必不可少，因为需要总是假设网络是不可靠的。因此，CAP理论实际上是要在可用性上和一致性上做权衡。</p><h1 id="二、BASE"><a href="#二、BASE" class="headerlink" title="二、BASE"></a>二、BASE</h1><p>基本可用、软状态、最终一致性三个短语的缩写。</p><h1 id="三、2PC"><a href="#三、2PC" class="headerlink" title="三、2PC"></a>三、2PC</h1><p>两阶段提交</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、CAP&quot;&gt;&lt;a href=&quot;#一、CAP&quot; class=&quot;headerlink&quot; title=&quot;一、CAP&quot;&gt;&lt;/a&gt;一、CAP&lt;/h1&gt;&lt;p&gt;分布式系统不可能同时满足一致性(C)、可用性(A)、分区容忍性(P)&lt;/p&gt;
&lt;h2 id=&quot;一致性&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="分布式" scheme="https://weikongkun.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="https://weikongkun.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
